<?xml version="1.0"?>

<project name="single1" default="javadoc" basedir="."
	xmlns:sonar="antlib:org.sonar.ant"
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>Single Class Test</description>
	
	
	<!-- Ftp Properties -->
	<property name="ftp-server" value="192.168.10.241" />
	<property name="ftp-userid" value="ftpuser" />
	<property name="ftp-password" value="bncitR&amp;D" />
	
	<!-- Ftp Properties -->
	
	<!-- Java Run Properties -->
	<property name="dir.report" location="result/junit" />
	<property name="dir.pmd" location="result/pmd" />
	<property name="dir.src" location="src" />
	<property name="dir.build" location="build" />
	<property name="dir.docs" location="docs" />
	<property name="dir.lib" location="lib" />
	<property name="pmd.home" location="pmd_home" />
	<property name="prop.name" value="test" />
	<property name="dir.findbugs" location="result/findbugs"/>
	<property name="maxHeap" value="-Xmx900m"/>
	<property name="enabledExtraVisitors" value="+CheckExpectedWarnings,+InefficientMemberAccess,+EmptyZipFileEntry"/>
	<condition property="javacExecutableDefined">
        <isset property="javac.executable"/>
    </condition>
    <property name="java.executable" value="" />
	
	<!-- Java Run Properties -->
	
	<!-- Sonar Properties -->
	<property name="sonar.host.url" value="http://localhost:9000" />

	<!-- Define the Sonar properties -->
	<property name="sonar.projectKey" value="org.sonarqube:sonarqube-scanner-ant" />
	<property name="sonar.projectName" value="Example of SonarQube Scanner for Ant Usage" />
	<property name="sonar.projectVersion" value="1.0" />
	<property name="sonar.language" value="java" />
	<property name="sonar.sources" value="${dir.src}" />
	<property name="sonar.java.binaries" value="${dir.build}/classes/" />
	<property name="sonar.java.libraries" value="${dir.lib}/*.jar" />
	<property name="sonar.sourceEncoding" value="UTF-8" />
	<!-- Sonar Properties -->
	
	<target name="ivy_report" depends="ivy_resolve">
        <ivy:report todir="${dir.docs}"/>
    </target>
	
	<target name="ivy_resolve">
        <ivy:retrieve />
    </target>
	
	<path id="classpath">
        <fileset dir="${dir.lib}" includes="**/*.jar"/>
    </path>
    
    <target name="sonar">
		<taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
			<classpath path="${dir.lib}/sonarqube-ant-task-2.5.jar" />
		</taskdef>
		<sonar:sonar />
	</target>
    
    <path id="pmdpath">
    	<pathelement location="${dir.build}"/>
        <fileset dir="${pmd.home}" includes="**/*.jar"/>
    </path>
	
	<target name="defineTasks"> 
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${dir.lib}/findbugs-ant.jar" /> 
        <taskdef name="filterBugs" classname="edu.umd.cs.findbugs.anttask.FilterBugsTask" classpath="${dir.lib}/findbugs-ant.jar"/> 
        <taskdef name="printBugs" classname="edu.umd.cs.findbugs.anttask.ConvertXmlToTextTask" classpath="${dir.lib}/findbugs-ant.jar"/> 
    </target> 
	
	<target name="pmd">
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmdpath"
			 />
		<pmd shortFilenames="true" 
			encoding="UTF-8" 
			rulesetfiles="rulesets/java/imports.xml,rulesets/java/design.xml">
			<formatter type="net.sourceforge.pmd.renderers.HTMLRenderer" toFile="${dir.pmd}/pmd_report.html" toConsole="false">
				<param name="linkPrefix" value="http://pmd.sourceforge.net/xref/"/>
			</formatter>
			<fileset dir="${dir.src}">
				<include name="com/anttest/**/*.java"/>
			</fileset>
		</pmd>
	</target>
	
	<!--
	<target name="runEffort" depends="defineTasks">
        <echo>Test expected warnings with *min* effort</echo>
        <findbugs home="${dir.lib}/"  jvmargs="-ea ${maxHeap}"
             jvm="${java.executable}"
             output="xml:withMessages" timestampNow="true" reportLevel="low" effort="min"
             chooseVisitors="${enabledExtraVisitors}" outputFile="${dir.findbugs}/minEffort.xml">
            <auxclasspath refid="classpath" />
			<sourcePath path="${dir.src}" />
			<class location="${dir.build}/classes/" />
        </findbugs>
	
        <filterBugs home="${dir.lib}/"
             priority="1"
             bugPattern="FB"
             inputFile="${dir.findbugs}/minEffort.xml"
             outputFile="${dir.findbugs}/unexpectedMin.xml">
         </filterBugs>
        <echo>Test expected warnings with *less* effort</echo>
        <findbugs home="${dir.lib}/"  jvmargs="-ea ${maxHeap}"
             jvm="${java.executable}"
             output="xml:withMessages" timestampNow="true" reportLevel="low" effort="less"
             chooseVisitors="${enabledExtraVisitors}" outputFile="${dir.findbugs}/lessEffort.xml">
           <auxclasspath refid="classpath" />
			<sourcePath path="${dir.src}" />
			<class location="${dir.build}/classes/" />
        </findbugs>
        <filterBugs home="${dir.lib}/"
             priority="1"
             bugPattern="FB"
             inputFile="${dir.findbugs}/lessEffort.xml"
             outputFile="${dir.findbugs}/unexpectedLess.xml">
         </filterBugs>
        <echo>Test expected warnings with *more* effort</echo>
        <findbugs home="${dir.lib}/"  jvmargs="-ea ${maxHeap}"
             jvm="${java.executable}"
             output="xml:withMessages" timestampNow="true" reportLevel="low" effort="more"
             chooseVisitors="${enabledExtraVisitors}" outputFile="${dir.findbugs}/moreEffort.xml">
            <auxclasspath refid="classpath" />
			<sourcePath path="${dir.src}" />
			<class location="${dir.build}/classes/" />
        </findbugs>
        
        <filterBugs home="${dir.lib}/"
             priority="1"
             bugPattern="FB"
             inputFile="${dir.findbugs}/moreEffort.xml"
             outputFile="${dir.findbugs}/unexpectedMore.xml">
         </filterBugs>
         
         <printBugs home="${dir.lib}/"
             errorProperty="bugsReported"
             inputFile="${dir.findbugs}/unexpectedMore.xml"
             format="text">
         </printBugs>

        <echo>Test expected warnings with *max* effort</echo>
        <findbugs home="${dir.lib}/"  jvmargs="-ea ${maxHeap}"
             jvm="${java.executable}"
             output="xml:withMessages" timestampNow="true" reportLevel="low" effort="max"
             chooseVisitors="${enabledExtraVisitors}" outputFile="${dir.findbugs}/maxEffort.xml">
            <auxclasspath refid="classpath" />
			<sourcePath path="${dir.src}" />
			<class location="${dir.build}/classes/" />
        </findbugs>
	
        <filterBugs home="${dir.lib}/"
             priority="1"
             bugPattern="FB"
             inputFile="${dir.findbugs}/maxEffort.xml"
             outputFile="${dir.findbugs}/unexpectedMax.xml">
         </filterBugs>

         <printBugs home="${dir.lib}/"
             errorProperty="bugsReported"
             inputFile="${dir.findbugs}/unexpectedMax.xml"
             format="text">
         </printBugs>
        <fail message="Unexpected bug warning(s) found, check the 'printBugs' output!">
            <condition>
                <isset property="bugsReported"/>
            </condition>
        </fail>
    </target>
	-->
	
	
	<target name="report.findbugs"
		description="Run code analysis over code to check for problems."
		
		>
		<available file="${dir.lib}/findbugs.jar"
			property="findbugs.available" />
		<fail unless="findbugs.available"
			message="Error: FINDBUGS_HOME not set or findbugs.jar not found." />
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
			classpath="${dir.lib}/findbugs-ant.jar"
			 />
			
		<mkdir dir="${dir.findbugs}" />
		
		<findbugs home="${dir.lib}/" workHard="true"
			output="html" outputFile="${dir.findbugs}/findbugs_report.html"
			timestampNow="true" reportLevel="low" effort="min"
			>
			<auxclasspath refid="classpath" />
			<sourcePath path="${dir.src}" />
			<class location="${dir.build}/classes/" />
		</findbugs>
	</target>
	
	
	<target name="init">
		<mkdir dir="build/classes" />
		<mkdir dir="${dir.report}" />
		<mkdir dir="${dir.findbugs}" />
		<mkdir dir="${dir.pmd}" />
		<echo>Apache Ant version is ${ant.version} - ${prop.name} </echo>
	</target>
	
	<target name="clean">
		<delete dir="docs" />
		<delete dir="build" />
		<delete dir="result" />
	</target>
	
	<target name="junit">

	    <junit printsummary="yes" haltonfailure="no">
	
		<!-- Project classpath, must include junit.jar -->
		<classpath refid="classpath" />
	
		<!-- test class -->
		<classpath location="${dir.build}/classes/" />
	
		<test name="com.anttest.test.TestEmployeeDetails"
			haltonfailure="no" todir="${dir.report}">
			<formatter type="xml" />
		</test>
	  </junit>
	</target>
	
	<!-- includeantruntime : ant의 클래스 패스를 클래스패스에 포함시킨다 -->
	<target name="compile"  description="compile the source">        
        <javac destdir="${dir.build}/classes/"
        	   includeantruntime="false"
        	   encoding="UTF-8"
        	   classpathref="classpath">   
        	<src path = "${dir.src}"/>
        </javac>
    </target>
	
	<target name="jar" >        
		<mkdir dir="build/jar" />        
        <jar
            destfile="${dir.build}/jar/ExMain.jar"             
            basedir="${dir.build}/classes"            
            includes="com/anttest/**" 
        >
	    	<manifest>
	            <attribute name="Main-Class" value="com.anttest.main.ExMain" />            
	        </manifest>
        </jar>
    </target>
	
	<!-- Jar File 실행 -->
	<target name="run">        
		<java jar="build/jar/ExMain.jar" fork="true" />    
	</target>
	
	<target name="javadoc" depends="clean,init,compile,jar,run,junit,report.findbugs,pmd,ivy_report">        
		<javadoc            
			sourcepath="${dir.src}"
			packagenames = "com.anttest.*"
            windowtitle="Ant Multi API"            
            destdir="${dir.docs}"
            version = "true"
            docencoding="UTF-8"
            Encoding="UTF-8"
            classpathref="classpath"
        >
        	<doctitle><![CDATA[= Simple Ant Project =]]></doctitle>
        	
        	<bottom>
		    	<![CDATA[Copyright @ 2018. All Rights Reserved.]]>
		    </bottom>
        </javadoc>
    </target>
    
    <target name="ftp" description="upload file to server">
    	<ftp 
			server="${ftp-server}" remotedir="/TEST/"
			userid="${ftp-userid}" password="${ftp-password}"
			action="mkdir" verbose="yes">
		</ftp>
		<ftp 
			server="${ftp-server}" remotedir="/TEST/"
			userid="${ftp-userid}" password="${ftp-password}"
			action="send" verbose="yes" depends="yes">
			<!-- All -->
			<!-- <fileset dir="" /> -->
    		<!-- All -->
    		
    		<!-- PMD_HOME Folder 안에 있는 모든 내용 제외 다 올림 -->
    		<fileset dir="">
    			<exclude name="**/pmd_home/**" />	
    		</fileset>
    		<!-- PMD_HOME Folder 안에 있는 모든 내용 제외 다 올림 -->
    		
		</ftp>
    	
    </target>
    
</project>